E SAZONALIDADE VERIFICADA
Pular para o conteúdo principal
Untitled15.ipynb
Untitled15.ipynb_Notebook sem estrela
Salvo pela última vez às 10:27
Arquivos
..
Solte arquivos aqui para fazer upload deles no armazenamento da sessão.
Disco
Disponível: 74.90 GB

[1]
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller

[2]
%matplotlib inline


[3]
file_path = '/content/INPC.xlsx'
df = pd.read_excel(file_path)

[4]
0s
df.head()


[9]
df['date'] = pd.to_datetime(df['date'])

[10]
df_filtered = df[df['date'].dt.year >= 2020]

[11]
0s
print(df_filtered)
          date  value   ano  mes  trimestre mes_texto
480 2020-01-01   0.19  2020    1          1       jan
481 2020-02-01   0.17  2020    2          1       fev
482 2020-03-01   0.18  2020    3          1       mar
483 2020-04-01  -0.23  2020    4          2       abr
484 2020-05-01  -0.25  2020    5          2       mai
485 2020-06-01   0.30  2020    6          2       jun
486 2020-07-01   0.44  2020    7          3       jul
487 2020-08-01   0.36  2020    8          3       ago
488 2020-09-01   0.87  2020    9          3       set
489 2020-10-01   0.89  2020   10          4       out
490 2020-11-01   0.95  2020   11          4       nov
491 2020-12-01   1.46  2020   12          4       dez
492 2021-01-01   0.27  2021    1          1       jan
493 2021-02-01   0.82  2021    2          1       fev
494 2021-03-01   0.86  2021    3          1       mar
495 2021-04-01   0.38  2021    4          2       abr
496 2021-05-01   0.96  2021    5          2       mai
497 2021-06-01   0.60  2021    6          2       jun
498 2021-07-01   1.02  2021    7          3       jul
499 2021-08-01   0.88  2021    8          3       ago
500 2021-09-01   1.20  2021    9          3       set
501 2021-10-01   1.16  2021   10          4       out
502 2021-11-01   0.84  2021   11          4       nov
503 2021-12-01   0.73  2021   12          4       dez
504 2022-01-01   0.67  2022    1          1       jan
505 2022-02-01   1.00  2022    2          1       fev
506 2022-03-01   1.71  2022    3          1       mar
507 2022-04-01   1.04  2022    4          2       abr
508 2022-05-01   0.45  2022    5          2       mai
509 2022-06-01   0.62  2022    6          2       jun
510 2022-07-01  -0.60  2022    7          3       jul
511 2022-08-01  -0.31  2022    8          3       ago
512 2022-09-01  -0.32  2022    9          3       set
513 2022-10-01   0.47  2022   10          4       out
514 2022-11-01   0.38  2022   11          4       nov
515 2022-12-01   0.69  2022   12          4       dez
516 2023-01-01   0.46  2023    1          1       jan
517 2023-02-01   0.77  2023    2          1       fev
518 2023-03-01   0.64  2023    3          1       mar
519 2023-04-01   0.53  2023    4          2       abr
520 2023-05-01   0.36  2023    5          2       mai
521 2023-06-01  -0.10  2023    6          2       jun
522 2023-07-01  -0.09  2023    7          3       jul
523 2023-08-01   0.20  2023    8          3       ago
524 2023-09-01   0.11  2023    9          3       set
525 2023-10-01   0.12  2023   10          4       out
526 2023-11-01   0.10  2023   11          4       nov
527 2023-12-01   0.55  2023   12          4       dez
528 2024-01-01   0.57  2024    1          1       jan
TESTE DE ESTACIONARIEDADE


[12]
0s
result = adfuller(X)
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
    print('\t%s: %.3f' % (key, value))

if result[0] < result[4]['5%']:
    print('Reject Ho - Time Series is Stationary')
else:
    print('Failed to Reject Ho - Time Series is Non-Stationary')
ADF Statistic: -2.157146
p-value: 0.222165
Critical Values:
	1%: -3.443
	5%: -2.867
	10%: -2.570
Failed to Reject Ho - Time Series is Non-Stationary

[14]
0s
df["Diff_Value"] = df["value"].diff().dropna()
X = df["Diff_Value"].dropna()
plt.plot(X)
plt.title('Série Temporal Diferenciada')
plt.show()

adf sem tendencia e sazonalidade verificada Este código realiza o teste ADF sem constante e sem tendência, utilizando até 10 lags e selecionando automaticamente o melhor modelo com base no critério BIC. Ele exibe a estatística ADF, o valor p e os valores críticos, e decide se a série temporal é estacionária ou não com base na comparação da estatística ADF com o valor crítico de 5%.


[15]
import pandas as pd
from statsmodels.tsa.stattools import adfuller

[30]
file_path = '/content/INPC.xlsx'
df = pd.read_excel(file_path)
df['date'] = pd.to_datetime(df['date'])
df_filtered = df[df['date'].dt.year >= 2020]

[45]
# Selecionando a serie filtrada
X = df_filtered['value'].dropna()

[34]
# Realizar o teste ADF sem constante e sem tendência
result = adfuller(X, maxlag=10, regression='n', autolag='BIC')

[35]
0s
# Exibir os resultados
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
    print('\t%s: %.3f' % (key, value))

if result[0] < result[4]['5%']:
    print('Reject Ho - Time Series is Stationary')
else:
    print('Failed to Reject Ho - Time Series is Non-Stationary')
ADF Statistic: -15.743977
p-value: 0.000000
Critical Values:
	1%: -2.570
	5%: -1.942
	10%: -1.616
Reject Ho - Time Series is Stationary

[36]
0s
# Plotar a série temporal diferenciada
plt.plot(X)
plt.title('Série Temporal Diferenciada')
plt.show()

ADF com drift
adf2<-ur.df(petro_brent, lags = 10, selectlags = "BIC", type="drift") summary(adf2)

Ambos os códigos realizam o teste ADF com drift, utilizando até 10 lags e selecionando automaticamente o melhor modelo com base no critério BIC. A principal diferença é a sintaxe das linguagens, mas a lógica e os parâmetros utilizados são equivalentes.

Clique duas vezes (ou pressione "Enter") para editar


[38]
# Realizar o teste ADF com drift
result = adfuller(X, maxlag=10, regression='c', autolag='BIC')


[39]
0s
# Exibir os resultados
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
    print('\t%s: %.3f' % (key, value))

if result[0] < result[4]['5%']:
    print('Reject Ho - Time Series is Stationary')
else:
    print('Failed to Reject Ho - Time Series is Non-Stationary')
ADF Statistic: -15.729038
p-value: 0.000000
Critical Values:
	1%: -3.443
	5%: -2.867
	10%: -2.570
Reject Ho - Time Series is Stationary

[40]
0s
# Plotar a série temporal diferenciada
plt.plot(X)
plt.title('Série Temporal Diferenciada')
plt.show()


[44]
2s
# Decompor a série temporal para verificar a sazonalidade
decomposition = seasonal_decompose(df_filtered['value'].dropna(), model='additive', period=12)
decomposition.plot()
plt.show()
